effects.mlogit(model01, covariate = "price", data = car)
#=====================
library(mlogit)
library(stargazer)
library(texreg)
#=====================
data("Car", package = "mlogit")
data(Car)
head(Car)
car = mlogit.data(Car, varying = 5:70, shape = "wide", sep = "",
choice = "choice", alt.levels = 1:6)
head(car)
names(car)
cars <- car %>% group_by(alt) %>% summarise_all(funs(mean))
cars
summary(car[,6:7])
stargazer(car[,c(2:5,8:ncol(car)-1)])
#============================================================================================
# start with something simple to think about the interpretation of variables
#============================================================================================
model01 <- mlogit(choice ~ type + price + cost, data = car)
setwd("/Users/ms486/Dropbox/Teaching/2019/AppliedEconometrics/DiscreteChoice")
sink("condlogit.tex")
texreg(model01)
sink()
effects.mlogit(model01, covariate = "price", data = car)
effects(model01, covariate = "price", data = car)
z <- with(car, data.frame(income = mean(price)))
# compute the marginal effects (the second one is an elasticity
effects(model01, covariate = "price", data = z)
z <- with(car, data.frame(price = mean(price)))
effects(model01, covariate = "price", data = z)
model011 <- mlogit(choice ~ type + price + cost, data = car,alt.subset=c("choice1","choice2","choice3","choice4","choice5"))
#================================================================
# This code generates the plots in the descriptive part
#================================================================
rm(list=ls())
library(foreign)
library(weights)
library(ggplot2)
library(gridExtra)
library(reshape)
library(gdata)
library(Rmisc)
library(pROC)
library(grid)
library(readstata13)
library(xtable)
library(Rmisc)
library(dplyr)
library(nnet)
library(fastDummies)
datapath = "/dat"
modpath  = "/Users/ms486/Dropbox/Teaching/2019/AppliedEconometrics/Econ613/A1"
options(xtable.floating = FALSE)
#========================================================
# load the data
#========================================================
datstu = read.csv(paste0(modpath,datapath,"/","datstu.csv"))
datjss = read.csv(paste0(modpath,datapath,"/","datjss.csv"))
datsss = read.csv(paste0(modpath,datapath,"/","datsss.csv"))
#========================================================
# Exercise 1
#========================================================
str(datstu)
nrow(datstu)
#====================
#number of schools
#====================
# here i find all the variables with schoolcode(grep(schoolcode)), vectorize it,
# then find unique set of schools, and then length it
length(unique(c(datstu[,grep(schoolcode)])))
length(unique(c(datstu[,grep("schoolcode",names(datstu))])))
dd = datstu[,grep("schoolcode",names(datstu))]
dim(dd)
c(dd)
ff = c(dd)
length(ff)
length(unique(c(as.matrix(datstu[,grep("schoolcode",names(datstu))]))))
names(datstu)
ncol(datstu)
dim(datstu[,(nc-5):nc])
dim(datstu[,(nc-5):nc])
nc = ncol(datstu)
dim(datstu[,(nc-5):nc])
datstu$choice1  = paste0(datstu$schoolcode1,datstu$choicepgm1)
datstu$choice2  = paste0(datstu$schoolcode2,datstu$choicepgm2)
datstu$choice3  = paste0(datstu$schoolcode3,datstu$choicepgm3)
datstu$choice4  = paste0(datstu$schoolcode4,datstu$choicepgm4)
datstu$choice5  = paste0(datstu$schoolcode5,datstu$choicepgm5)
datstu$choice6  = paste0(datstu$schoolcode6,datstu$choicepgm6)
nc = ncol(datstu)
length(unique(c(as.matrix(datstu[,(nc-5):nc]))))
# here i find all the variables with schoolcode(grep(schoolcode)), vectorize it,
# then find unique set of schools, and then length it
length(!is.na(unique(c(as.matrix(datstu[,grep("schoolcode",names(datstu))])))))
#number of programs
length(!is.na(unique(c(as.matrix(datstu[,grep("pgm",names(datstu))])))))
#number of choices
datstu$choice1  = paste0(datstu$schoolcode1,datstu$choicepgm1)
datstu$choice2  = paste0(datstu$schoolcode2,datstu$choicepgm2)
datstu$choice3  = paste0(datstu$schoolcode3,datstu$choicepgm3)
datstu$choice4  = paste0(datstu$schoolcode4,datstu$choicepgm4)
datstu$choice5  = paste0(datstu$schoolcode5,datstu$choicepgm5)
datstu$choice6  = paste0(datstu$schoolcode6,datstu$choicepgm6)
nc = ncol(datstu)
length(!is.na(unique(c(as.matrix(datstu[,(nc-5):nc])))))
table(is.na(datstu$score))
?apply
schools = apply(as.matrix(datstu[,grep("schoolcode",names(datstu))]),1,function(x)length(unique(x)))
table(schools)
schools = apply(as.matrix(datstu[,grep("schoolcode",names(datstu))]),1,function(x)length(unique(!is.na(x))))
table(schools)
#====================
#number of schools
#====================
# here i find all the variables with schoolcode(grep(schoolcode)), vectorize it,
# then find unique set of schools, and then length it
# get rid of the missing observations
length(unique(c(as.matrix(datstu[,grep("schoolcode",names(datstu))])),na.rm=T))
#number of programs
length(unique(c(as.matrix(datstu[,grep("pgm",names(datstu))])),na.rm=T))
#number of choices
datstu$choice1  = paste0(datstu$schoolcode1,datstu$choicepgm1)
datstu$choice2  = paste0(datstu$schoolcode2,datstu$choicepgm2)
datstu$choice3  = paste0(datstu$schoolcode3,datstu$choicepgm3)
datstu$choice4  = paste0(datstu$schoolcode4,datstu$choicepgm4)
datstu$choice5  = paste0(datstu$schoolcode5,datstu$choicepgm5)
datstu$choice6  = paste0(datstu$schoolcode6,datstu$choicepgm6)
nc = ncol(datstu)
length(unique(c(as.matrix(datstu[,(nc-5):nc])),na.rm=T))
#missing test score
table(is.na(datstu$score))
#apply to the same school
schools = apply(as.matrix(datstu[,grep("schoolcode",names(datstu))]),1,function(x)length(unique((x))))
table(schools)
names(datstu)
names(datstu)
names(datjss)
names(datsss)
datchoice = datstu[,(nc-5):nc]
datchoice[1:10,]
names(datstu)
names(datjss)
names(datsss)
datchoice = datstu[,(nc-5):nc]
placement = NULL
for (iter in 1:nrow(datstu))
{
if (rankplace[iter]<7)
placement[iter] = datchoice[,rankplace[iter]]
}
names(datstu)
names(datjss)
names(datsss)
datchoice = datstu[,(nc-5):nc]
placement = NULL
for (iter in 1:nrow(datstu))
{
if (datstu$rankplace[iter]<7)
placement[iter] = datchoice[,datstu$rankplace[iter]]
}
names(datstu)
names(datjss)
names(datsss)
datchoice = datstu[,(nc-5):nc]
placement = NULL
for (iter in 1:nrow(datstu))
{
if (datstu$rankplace[iter]<7)
{
placement[iter] = datchoice[,datstu$rankplace[iter]]
}
}
iter
datstu$rankplace[iter]
datchoice = datstu[,(nc-5):nc]
placement = NULL
for (iter in 1:nrow(datstu))
{
if (!is.na(datstu$rankplace[iter])&datstu$rankplace[iter]<7)
{
placement[iter] = datchoice[,datstu$rankplace[iter]]
}
}
dim(datsss)
datsss[1:10,]
temp      = data.frame(placement,datstu$score)
temp        = data.frame(placement,datstu$score)
names(temp)
temp        = data.frame(placement,datstu$score)
names(temp) = c("school",score)
dat_prog  =  temp %>%
group_by(school) %>%
summarise(cutoff  = min(score),
quality = mean(score))
temp        = data.frame(placement,datstu$score)
names(temp) = c("school","score")
dat_prog  =  temp %>%
group_by(school) %>%
summarise(cutoff  = min(score),
quality = mean(score))
dat_prog
dim(dat_prog)
temp        = data.frame(placement,datstu$score)
temp[1:10,]
temp[1:100,]
temp        = data.frame(placement,datstu$score)
names(temp) = c("school","score")
dat_prog  =  temp %>%
group_by(school) %>%
summarise(cutoff  = min(score,na.rm=T),
quality = mean(score,na.rm=T))
dat_prog
dat_prog[1:10,]
datchoice = datstu[,(nc-5):nc]
datchoice[1:10,]
datchoice = datstu[,(nc-5):nc]
placement = NULL
for (iter in 1:nrow(datstu))
{
if (!is.na(datstu$rankplace[iter])&datstu$rankplace[iter]<7)
{
placement[iter] = datchoice[iter,datstu$rankplace[iter]]
}
}
temp        = data.frame(placement,datstu$score)
names(temp) = c("school","score")
dat_prog  =  temp %>%
group_by(school) %>%
summarise(cutoff  = min(score,na.rm=T),
quality = mean(score,na.rm=T))
dat_prog[1:10,]
dat_prog
str(dat_prog)
datfinal = data.frame(dat_prog)
datfinal            = data.frame(dat_prog)
datfinal$schoolcode = substr(datfinal$school,1,5)
datfinal[1:10,]
datfinal            = data.frame(dat_prog)
datfinal$schoolcode = substr(datfinal$school,1,6)
datfinal[1:10,]
names(datsss)
datf = merge(datfinal,datsss,by="schoolcode")
names(datf)
datf     = merge(datfinal,datsss,by="schoolcode")
datfinal = subset(datf,select="schoolcode","school","cutoff","quality","sssdistrict","ssslong","ssslat")
datfinal = subset(datf,select="schoolcode","school","cutoff","quality","sssdistrict","ssslong","ssslat")
datf     = merge(datfinal,datsss,by="schoolcode")
datfinal = subset(datf,select=c("schoolcode","school","cutoff","quality","sssdistrict","ssslong","ssslat"))
datf     = merge(datfinal,datsss,by="schoolcode")
datfinal = subset(datf,select=c("schoolcode","school","cutoff","quality","sssdistrict","ssslong","ssslat"))
datfinal            = data.frame(dat_prog)
datfinal$schoolcode = substr(datfinal$school,1,6)
datfinal[1:10,]
#====================================================================
# Finally, i match this dataframe to sss by schoolcode
#====================================================================
datf     = merge(datfinal,datsss,by="schoolcode")
names(datf)
datfinal = subset(datf,select=c("schoolcode","school","cutoff","quality","sssdistrict","ssslong","ssslat"))
names(datstu)
#================================================================
# This code generates the plots in the descriptive part
#================================================================
rm(list=ls())
library(foreign)
library(weights)
library(ggplot2)
library(gridExtra)
library(reshape)
library(gdata)
library(Rmisc)
library(pROC)
library(grid)
library(readstata13)
library(xtable)
library(Rmisc)
library(dplyr)
library(nnet)
library(fastDummies)
datapath = "/dat"
modpath  = "/Users/ms486/Dropbox/Teaching/2019/AppliedEconometrics/Econ613/A1"
options(xtable.floating = FALSE)
#========================================================
# load the data
#========================================================
datstu = read.csv(paste0(modpath,datapath,"/","datstu.csv"))
datjss = read.csv(paste0(modpath,datapath,"/","datjss.csv"))
datsss = read.csv(paste0(modpath,datapath,"/","datsss.csv"))
#========================================================
# Exercise 1
#========================================================
str(datstu) # provide a good overview of the data
#====================
#number of students
#====================
nrow(datstu)
#====================
#number of schools
#====================
# here i find all the variables with schoolcode(grep(schoolcode)), vectorize it,
# then find unique set of schools, and then length it
# get rid of the missing observations
length(unique(c(as.matrix(datstu[,grep("schoolcode",names(datstu))])),na.rm=T))
#number of programs
length(unique(c(as.matrix(datstu[,grep("pgm",names(datstu))])),na.rm=T))
#number of choices
datstu$choice1  = paste0(datstu$schoolcode1,datstu$choicepgm1)
datstu$choice2  = paste0(datstu$schoolcode2,datstu$choicepgm2)
datstu$choice3  = paste0(datstu$schoolcode3,datstu$choicepgm3)
datstu$choice4  = paste0(datstu$schoolcode4,datstu$choicepgm4)
datstu$choice5  = paste0(datstu$schoolcode5,datstu$choicepgm5)
datstu$choice6  = paste0(datstu$schoolcode6,datstu$choicepgm6)
nc = ncol(datstu)
length(unique(c(as.matrix(datstu[,(nc-5):nc])),na.rm=T))
#missing test score
table(is.na(datstu$score))
#apply to the same school
schools = apply(as.matrix(datstu[,grep("schoolcode",names(datstu))]),1,function(x)length(unique((x))))
table(schools)
#apply to less than 6 choices
table(is.na(dat08$schoolcode1))
table(is.na(dat08$schoolcode2))
table(is.na(dat08$schoolcode3))
table(is.na(dat08$schoolcode4))
table(is.na(dat08$schoolcode5))
table(is.na(dat08$schoolcode6))
#========================================================
# Exercise 2
#========================================================
#====================================================================
# first, I create a database that records only choices
# then, i create the school where the student is admitted
#====================================================================
datchoice = datstu[,(nc-5):nc]
placement = NULL
for (iter in 1:nrow(datstu))
{
if (!is.na(datstu$rankplace[iter])&datstu$rankplace[iter]<7)
{
placement[iter] = datchoice[iter,datstu$rankplace[iter]]
}
}
#====================================================================
# Second, i create dataframe indicating for each student
# the test score and the school he got admitted to..
# then I cast that database into a dataframe indicating the cutoff and quality
# then I extract the first 6 characteristics of the choice to get the school code
#====================================================================
temp        = data.frame(placement,datstu$score)
names(temp) = c("school","score")
dat_prog  =  temp %>%
group_by(school) %>%
summarise(cutoff  = min(score,na.rm=T),
quality = mean(score,na.rm=T))
datfinal            = data.frame(dat_prog)
datfinal$schoolcode = substr(datfinal$school,1,6)
datfinal[1:10,]
#====================================================================
# Finally, i match this dataframe to sss by schoolcode
#====================================================================
datf          = merge(datfinal,datsss,by="schoolcode")
dat_aggregate = subset(datf,select=c("schoolcode","school","cutoff","quality","sssdistrict","ssslong","ssslat"))
#======================================================================
# exercise 4/5
#======================================================================
merger = function(dat_ind,dat_agg,ind)
{
nvar   = ncol(dat_agg)
fdat08 = merge(dat_ind,dat_agg,by.y="school",by.x=paste0("choice",ind),all.x=TRUE)
nf     = ncol(fdat08)
names(fdat08)[(nf-nvar+2):nf] = paste(names(fdat08)[(nf-nvar+2):nf],paste0("ch",ind),sep="_")
return(fdat08)
}
names(datstu)
dat1 = merger(datstu,dat_aggregate,1)
dat2 = merger(dat1,dat_aggregate,2)
dat3 = merger(dat2,dat_aggregate,3)
dat4 = merger(dat3,dat_aggregate,4)
dat5 = merger(dat4,dat_aggregate,5)
dat6 = merger(dat5,dat_aggregate,6)
dim(dat1)
datf          = merge(datfinal,datsss,by="schoolcode")
dat_aggregate = subset(datf,select=c("school","cutoff","quality","ssslong","ssslat"))
#======================================================================
# exercise 4/5
#======================================================================
merger = function(dat_ind,dat_agg,ind)
{
nvar   = ncol(dat_agg)
fdat08 = merge(dat_ind,dat_agg,by.y="school",by.x=paste0("choice",ind),all.x=TRUE)
nf     = ncol(fdat08)
names(fdat08)[(nf-nvar+2):nf] = paste(names(fdat08)[(nf-nvar+2):nf],paste0("ch",ind),sep="_")
return(fdat08)
}
names(datstu)
dat1 = merger(datstu,dat_aggregate,1)
dat2 = merger(dat1,dat_aggregate,2)
dat3 = merger(dat2,dat_aggregate,3)
dat4 = merger(dat3,dat_aggregate,4)
dat5 = merger(dat4,dat_aggregate,5)
dat6 = merger(dat5,dat_aggregate,6)
merger = function(dat_ind,dat_agg,ind)
{
nvar   = ncol(dat_agg)
fdat08 = merge(dat_ind,dat_agg,by.y="school",by.x=paste0("choice",ind),all.x=TRUE)
nf     = ncol(fdat08)
names(fdat08)[(nf-nvar+2):nf] = paste(names(fdat08)[(nf-nvar+2):nf],paste0("ch",ind),sep="_")
return(fdat08)
}
dat_temp = subset(datstu,select=c("score","jssdistrict","choice1","choice2","choice3","choice4","choice5","choice6"))
dat1 = merger(dat_temp,dat_aggregate,1)
dat2 = merger(dat1,dat_aggregate,2)
dat3 = merger(dat2,dat_aggregate,3)
dat4 = merger(dat3,dat_aggregate,4)
dat5 = merger(dat4,dat_aggregate,5)
dat6 = merger(dat5,dat_aggregate,6)
names(datsss)
162411-9100
162411-9100-115
var = c(paste0(c("colonial","relig","board","mixed07","cutoff07","dist"),"_ch"),"choicepgm")
var
#=====================
library(mlogit)
library(stargazer)
library(texreg)
#=====================
data("Car", package = "mlogit")
data(Car)
head(Car)
car = mlogit.data(Car, varying = 5:70, shape = "wide", sep = "",
choice = "choice", alt.levels = 1:6)
head(car)
names(car)
cars <- car %>% group_by(alt) %>% summarise_all(funs(mean))
cars
summary(car[,6:7])
stargazer(car[,c(2:5,8:ncol(car)-1)])
model072 <- mlogit(choice ~ price+cost+log(size), data = car)
car
model072 <- mlogit(choice ~ price+cost+I(log(size)), data = car)
model041 <- mlogit(choice ~ fuel + price + cost +  range, data = car)
model042 <- mlogit(choice ~ fuel + price + cost +  range + I(range*coml5) , data = car)
model043 <- mlogit(choice ~ fuel + price + cost +  range + I(cost*coml5) , data = car)
model044 <- mlogit(choice ~ fuel + price + cost +  range + I(cost*coml5) + I(range*coml5) , data = car)
summary(model042)
modelf <- mlogit(choice ~ type + fuel + price + cost + range + acc + speed + pollution + size + space + station | college + hsg2 + coml5, data = car)
summary(modelf)
modelf <- mlogit(choice ~ price + cost + range + acc + speed + pollution + size + space + station | college + hsg2 + coml5, data = car)
summary(modelf)
modelf1 = mlogit(choice ~ price + cost + range + acc,data = car)
modelf2 = mlogit(choice ~ price + cost + range + acc|  hsg2, data = car)
modelf3 = mlogit(choice ~ price + cost + range + acc + speed + pollution | hsg2 + coml5, data = car)
modelf4 = mlogit(choice ~ price + cost + range + acc + speed + pollution | college + hsg2 + coml5, data = car)
texreg(list(modelf1,modelf2,modelf3,modelf4))
setwd("/Users/ms486/Dropbox/Teaching/2019/AppliedEconometrics/Econ613/DiscreteChoice")
sink("mixedlogit.tex")
texreg(list(modelf1,modelf2,modelf3,modelf4))
sink()
model071 <- mlogit(choice ~ price+cost+as.numeric(size>3), data = car)
model073 <- mlogit(choice ~ price+cost+as.numeric(size>3), data = car)
model071 <- mlogit(choice ~ price+cost+as.numeric(size>4), data = car)
model071 <- mlogit(choice ~ price+cost+as.numeric(size>2), data = car)
summary(model071)
model071 <- mlogit(choice ~ price+cost+size, data = car)
model073 <- mlogit(choice ~ price+cost+as.numeric(size>2), data = car)
texreg(list(model071,model072,model073))
model072 <- mlogit(choice ~ price+cost+(1+size), data = car)
summary(model072)
car$size1 = car$size + 1
model071 <- mlogit(choice ~ price+cost+size, data = car)
model072 <- mlogit(choice ~ price+cost+(size1), data = car)
car$size1 = car$size + 1
model071 <- mlogit(choice ~ price+cost+size, data = car)
model072 <- mlogit(choice ~ price+cost+(size1), data = car)
model073 <- mlogit(choice ~ price+cost+as.numeric(size>2), data = car)
texreg(list(model071,model072,model073))
model071 <- mlogit(choice ~ price+cost+size, data = car)
model072 <- mlogit(choice ~ price+cost+(size1), data = car)
model073 <- mlogit(choice ~ price+cost+log(size1), data = car)
model074 <- mlogit(choice ~ price+cost+as.numeric(size>2), data = car)
texreg(list(model071,model072,model073,model074))
car$size1 = car$size + 1
car$size2 = car$size -10
model071 <- mlogit(choice ~ price+cost+size, data = car)
model072 <- mlogit(choice ~ price+cost+(size1), data = car)
model073 <- mlogit(choice ~ price+cost+(size2), data = car)
car$size1 = car$size + 1
car$size2 = car$size -10
model071 <- mlogit(choice ~ price+cost+size, data = car)
model072 <- mlogit(choice ~ price+cost+(size1), data = car)
model073 <- mlogit(choice ~ price+cost+(size2), data = car)
model074 <- mlogit(choice ~ price+cost+log(size1), data = car)
model075 <- mlogit(choice ~ price+cost+as.numeric(size>2), data = car)
texreg(list(model071,model072,model073,model074,model075))
car$size1 = car$size + 1
car$size2 = car$size -10
model071 <- mlogit(choice ~ price+cost+size, data = car)
model072 <- mlogit(choice ~ price+cost+(size1), data = car)
model073 <- mlogit(choice ~ price+cost+(size2), data = car)
model074 <- mlogit(choice ~ price+cost+log(size1), data = car)
model075 <- mlogit(choice ~ price+cost+as.numeric(size>2), data = car)
sink("condlogit7.tex")
texreg(list(model071,model072,model073,model074,model075))
sink()
