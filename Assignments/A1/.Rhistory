pull(idmen)
# Count individuals in those households
datind2011 <- read_datind("datind2011.csv")
datind2011 %>%
filter(idmen %in% household_Paris) %>%
select(idind) %>%
n_distinct(na.rm = TRUE)
# Count individuals in those households
datind2011 <- read_datind("datind2011.csv")
datind2011 %>%
filter(idmen %in% household_Paris) %>%
select(idind) %>%
n_distinct(na.rm = TRUE)
datind2011 %>%
filter(idmen %in% household_Paris) %>%
nrow()
### Exercise 2
## 2.1.1
years = 2004:2019
filenames = paste(rep("datind",length(years)), years, ".csv", sep = "")
data_ind <- map_dfr(filenames, read_datind)
## 2.1.2
filenames = paste(rep("dathh", length(years)), years, ".csv", sep = "")
data_hh <- map_dfr(filenames, read_dathh)
## 2.1.3
tbl_vars(data_ind)[tbl_vars(data_ind) %in% tbl_vars(data_hh)]
## 2.1.4
data_merged <- left_join(data_ind, data_hh, by = c("idmen", "year"))
## 2.2.1
large_household <-
data_merged %>%
distinct(idind, idmen, year) %>%
count(idmen, year, sort = TRUE) %>%
filter(n >= 4)
large_household %>% nrow()
# Count per year
large_household %>% count(year)
## 2.2.2
unemployed_household <-
data_merged %>%
filter(empstat == "Unemployed") %>%
distinct(idind, idmen, year) %>%
count(idmen, year, sort = TRUE) %>%
filter(n >= 1)
unemployed_household %>% nrow()
# Count per year
unemployed_household %>% count(year)
## 2.2.3
profession_household <-
data_merged %>%
filter(!is.na(profession)) %>%
distinct(idind, idmen, year, profession) %>%
count(idmen, year, profession, sort = TRUE) %>%
filter(n >= 2) %>%
distinct(idmen, year, n)
profession_household %>% nrow()
# Count per year
profession_household %>% count(year)
filenames = paste(rep("datind", length(years)), years, ".csv", sep = "")
data_ind <- map_dfr(filenames, read_datind)
data_ind <- data_ind %>% distinct(idind, year)
data_ind <- map_dfr(filenames, read_datind)
413472 - 413504
data_ind <- data_ind %>% distinct(idind, year)
temp_data <- read_datind("datind2013.csv")
?duplicate
duplicated(temp_data$idind)
temp_data %>% filter(duplicated(temp_data$idind))
temp_data %>% filter(duplicated(temp_data$idind)) %>% sort(idind)
temp_data %>% filter(duplicated(temp_data$idind)) %>% arrange(idind)
View(temp_data)
a <-
temp_data %>% filter(duplicated(temp_data$idind)) %>% arrange(idind)
View(a)
temp_data %>% distinct() %>% check_unique_idind_row
a <- filter(duplicated(temp_data$idind))
temp_data %>% filter(duplicated(temp_data$idind)) %>% arrange(idind)
temp_data %>% distinct()
temp_data %>% distinct() %>% nrow()
temp_data %>% distinct() %>% select(idind) %>% n_distinct(na.rm = TRUE)
View(temp_data)
temp_data %>% distinct(-idmen) %>% nrow()
?distinct
temp_data %>% select(-idme) %>% distinct() %>% check_unique_idind_row
temp_data %>% select(-idmen) %>% distinct() %>% check_unique_idind_row
### Exercise 2
## 2.1.1
years = 2004:2019
filenames = paste(rep("datind", length(years)), years, ".csv", sep = "")
data_ind <- map_dfr(filenames, read_datind)
data_ind <- data_ind %>% distinct(idind, year) # delete duplicate data
## 2.1.2
filenames = paste(rep("dathh", length(years)), years, ".csv", sep = "")
data_hh <- map_dfr(filenames, read_dathh)
## 2.1.3
tbl_vars(data_ind)[tbl_vars(data_ind) %in% tbl_vars(data_hh)]
## 2.1.4
data_merged <- left_join(data_ind, data_hh, by = c("idmen", "year"))
## 2.2.1
large_household <-
data_merged %>%
distinct(idind, idmen, year) %>%
count(idmen, year, sort = TRUE) %>%
filter(n >= 4)
## 2.1.3
tbl_vars(data_ind)[tbl_vars(data_ind) %in% tbl_vars(data_hh)]
## 2.1.4
data_merged <- left_join(data_ind, data_hh, by = c("idmen", "year"))
## 2.1.3
tbl_vars(data_ind)[tbl_vars(data_ind) %in% tbl_vars(data_hh)]
### Exercise 2
## 2.1.1
years = 2004:2019
filenames = paste(rep("datind", length(years)), years, ".csv", sep = "")
data_ind <- map_dfr(filenames, read_datind)
# Find errors source
datind2013 <- read_datind("datind2013.csv")
datind2013 %>% select(-idmen) %>% distinct() %>% check_unique_idind_row
filenames = paste(rep("datind", length(years)), years, ".csv", sep = "")
data_ind <- map_dfr(filenames, read_datind)
data_ind <- # delete duplicate data
data_ind %>%
group_by(idind, year) %>%
filter(n()>1) %>%
ungroup()
View(data_ind)
data_ind <- map_dfr(filenames, read_datind)
?filter
data_ind_clear <- # delete duplicate data
data_ind %>%
group_by(idind, year) %>%
filter(n()>1)
data_ind_clear <- # delete duplicate data
data_ind %>%
group_by(idind, year)
### Exercise 2
## 2.1.1
years = 2004:2019
filenames = paste(rep("datind", length(years)), years, ".csv", sep = "")
data_ind <- map_dfr(filenames, read_datind)
data_ind_clear <- # delete duplicate data
data_ind %>%
distinct(idind, year, .keep_all = TRUE)
## 2.1.2
filenames = paste(rep("dathh", length(years)), years, ".csv", sep = "")
data_hh <- map_dfr(filenames, read_dathh)
## 2.1.3
tbl_vars(data_ind)[tbl_vars(data_ind_clear) %in% tbl_vars(data_hh)]
## 2.1.4
data_merged <- left_join(data_ind_clear, data_hh, by = c("idmen", "year"))
## 2.2.1
large_household <-
data_merged %>%
distinct(idind, idmen, year) %>%
count(idmen, year, sort = TRUE) %>%
filter(n >= 4)
large_household %>% nrow()
# Count per year
large_household %>% count(year)
## 2.2.2
unemployed_household <-
data_merged %>%
filter(empstat == "Unemployed") %>%
distinct(idind, idmen, year) %>%
count(idmen, year, sort = TRUE) %>%
filter(n >= 1)
unemployed_household %>% nrow()
# Count per year
unemployed_household %>% count(year)
## 2.2.3
profession_household <-
data_merged %>%
filter(!is.na(profession)) %>%
distinct(idind, idmen, year, profession) %>%
count(idmen, year, profession, sort = TRUE) %>%
filter(n >= 2) %>%
distinct(idmen, year, n)
profession_household %>% nrow()
# Count per year
profession_household %>% count(year)
## 2.2.4
kids_ind <-
data_merged %>%
filter(mstatus == "Couple, with Kids") %>%
distinct(idind, year)
kids_ind %>% nrow()
# Count per year
kids_ind  %>% count(year)
## 2.2.5
Paris_ind <-
data_merged %>%
filter(location == "Paris") %>%
distinct(idind, year)
Paris_ind %>% nrow()
# Count per year
Paris_ind  %>% count(year)
## 2.2.6
data_merged %>%
distinct(idind, idmen, year) %>%
count(idmen, year, sort = TRUE) %>%
slice_head() %>%
pull(idmen)
## 2.2.6
data_merged %>%
distinct(idind, idmen, year) %>%
count(idmen, year, sort = TRUE) %>%
slice_head() %>%
as.character(pull(idmen))
## 2.2.6
data_merged %>%
distinct(idind, idmen, year) %>%
count(idmen, year, sort = TRUE) %>%
slice_head() %>%
pull(idmen) %>%
as.character()
## 2.2.7
household_2011_12 <-
data_merged %>%
filter(year == 2010 | year == 2011) %>%
distinct(idmen, year)
household_2011_12 %>% nrow()
# Count per year
household_2011_12  %>% count(year)
### Exercise 3
## 3.1
# Note that there are 2 households that are in the "datind" data set but not in the "dathh" data set,
data_ind %>%
filter(! idmen %in% data_hh$idmen) %>%
distinct(idmen)
# while all households in the "dathh" data set are in the "datind" data set.
data_hh %>%
filter(! idmen %in% data_ind$idmen) %>%
distinct(idmen)
# Since the question focus on the households, we use the "dathh" data set , rather than the merged one.
household_group <-
data_hh %>%
group_by(idmen) %>%
arrange(year)
year_enter_hh <-
household_group %>%
filter(row_number()==1) %>%
mutate(year_enter = year) %>%
select(idmen, year_enter)
year_exit_hh <-
household_group %>%
filter(row_number()==n()) %>%
mutate(year_exit = year + 1) %>%
select(idmen, year_exit)
years_in_survey <-
left_join(year_enter_hh, year_exit_hh)  %>%
mutate(years_in_survey = year_exit - year_enter)
# Check if gap year
years_in_survey <-
household_group %>%
summarise(length = n()) %>%
mutate(year_enter = year_enter_hh$year_enter,
year_exit = year_exit_hh$year_exit,
years_in_survey = years_in_survey$years_in_survey) %>%
mutate(gap = length < years_in_survey)
years_in_survey %>%
filter(gap == TRUE) %>%
nrow()
# Plot the distributions of the time spent in the panel but consider different cases:
# consecutive years: only count consecutive years and ignore any household with gap year
# total years: count the total years a household spent in the panel regardless there is a gap year or not
years_in_survey %>%
filter(gap == FALSE) %>%
ggplot() +
geom_density(aes(x = years_in_survey, color="consecutive years"), bw = 0.5) +
geom_density(data = years_in_survey, aes(x = length, color="total years"), bw = 0.5) +
scale_color_manual("", breaks=c("consecutive years", "total years"), values = c("blue","red")) +
guides(color = guide_legend(override.aes = list(fill = c("blue", "red"))))
## 3.2
data_datent <-
data_merged %>%
mutate(year_is_datent = (datent == year))
# Report first ten observations
data_datent %>%
select(idind, idmen, year, datent, year_is_datent) %>%
slice(1:10)
# Report share per year
datent_percentage <-
data_datent %>%
group_by(year) %>%
summarise(datent_rate = mean(year_is_datent, na.rm=TRUE))
datent_percentage %>%
ggplot(aes(x = year, y = datent_rate)) +
geom_line()
## 3.3
data_migration <-
data_merged %>%
mutate(migration = ((myear == year) & !is.na(myear)) | ((move == 2)& !is.na(move))) %>%
mutate(migration = ifelse( is.na(myear) & is.na(move) , NA, migration))
# Report first ten observations
data_migration %>%
select(idind, idmen, year, myear, move, migration) %>%
slice(1:10)
# Report share per year
migration_percentage <-
data_migration %>%
group_by(year) %>%
summarise(migration_rate = mean(migration, na.rm = TRUE))
migration_percentage %>%
ggplot(aes(x = year, y = migration_rate)) +
geom_line()
## 3.4
left_join(datent_percentage, migration_percentage) %>%
ggplot(aes(x = year)) +
geom_line(aes(y = datent_rate), color = "red") +
geom_line(aes(y = migration_rate), color = "blue")
## 3.5
data_change_work_in_migration <-
data_datent %>%
filter(year_is_datent == TRUE) %>%
group_by(idind) %>%
mutate(cahnge_profession = n_distinct(profession, na.rm = TRUE) > 1 ) %>%
mutate(change_empstat = n_distinct(empstat, na.rm = TRUE) > 1) %>%
mutate(change_work = cahnge_profession | change_empstat)
change_work_in_migration <-
data_change_work_in_migration %>%
ungroup() %>%
filter(change_work == TRUE) %>%
distinct(idmen,year)
change_work_in_migration %>% nrow()
# Count per year
change_work_in_migration %>% count(year)
### Exercise 4
# We crate a dummies table indicating whether an individual is in the survey of certain year
years = 2004:2019
distinct_ind_data <-
data_ind %>%
distinct(idind, year)
dummies <- outer(distinct_ind_data$year, years, "==")
colnames(dummies) <- years
data_ind_dummies <-
as_tibble(dummies) %>%
mutate(idind = distinct_ind_data$idind) %>%
group_by(idind) %>%
summarise(across(.fns = sum)) %>%
ungroup()
View(data_ind_dummies)
# We first compute year by year attrition rate:
# numerator = number of people that are both in the survey of this year and last year
# denominator = number of people that are in the survey of last year
year_by_year_compare <-
data_ind_dummies %>%
mutate(across(-c("2004", idind),
~ . & select(data_ind_dummies,
grep(cur_column(), colnames(data_ind_dummies)) - 1),
.names = "consecutive_{.col}"))
survival_number <-
year_by_year_compare %>%
summarise(across(-idind, sum))
survival_rate_year_by_year <-
survival_number %>%
summarise(across(c("2005":"2019"),
~ select(survival_number,
paste("consecutive", cur_column(), sep = "_")) / .
))
attriion_rate_year_by_year <- 1 - survival_rate_year_by_year
colnames(attriion_rate_year_by_year) <- years[-1]
attriion_rate_year_by_year <-
attriion_rate_year_by_year %>%
pivot_longer(everything(), names_to = "year", values_to = "attrition_rate_year_by_year")
attriion_rate_year_by_year
# We then compute attrition rate based on the certain base year:
# numerator = number of people that are in the panel from base year till this year
# denominator = number of people that are in the survey of base year
compute_attrition_rate <-
function(base_year, data_id_dummies){
if (base_year >= 2019 | base_year < 2004) {
return("Cannot compute. Base year shoud be 2004-2018")
}
data_id_dummies <-
data_id_dummies %>%
pivot_longer(cols = -idind,
names_to = "year",
values_to = "participate") %>%
mutate(year = as.numeric(year)) %>%
mutate(participate = ifelse(year < base_year, 0, participate))
survival_participate_number <-
data_id_dummies %>%
group_by(idind) %>%
arrange(year) %>%
mutate(consecutive_years = cumsum(participate),
survive = consecutive_years == (year - base_year + 1) & consecutive_years != 0) %>%
group_by(year) %>%
mutate(survival_number = sum(survive == TRUE),
participate_number = sum(participate == TRUE)) %>%
distinct(year, survival_number, participate_number)
base_year_number <-
survival_participate_number %>%
filter(year == base_year) %>%
pull(participate_number)
attrition_rate <-
survival_participate_number %>%
mutate(survival_rate = survival_number/base_year_number,
attrition_rate = ifelse(year < base_year, NA, 1 - survival_rate)) %>%
select(year, attrition_rate)
return(attrition_rate)
}
# Take 2014 as an example
compute_attrition_rate(2014,data_ind_dummies)
# The whole table
compute_attrition_rate_for_table <- function(base_years, data_id_dummies){
t_compute_attrition_rate <- function(base_year, data_id_dummies){
return(
compute_attrition_rate(base_year, data_id_dummies) %>%
pivot_wider(names_from = year, values_from = attrition_rate))
}
table <- map_dfr(base_years, t_compute_attrition_rate, data_ind_dummies) %>% t()
colnames(table) <- paste("base_years", base_years, sep = "_")
return(as_tibble(table))
}
base_years = 2004:2018
table <- compute_attrition_rate_for_table(base_years, data_ind_dummies)
table
distinct_ind_data <- distinct(data_ind, idind, year)
dummies <- outer(distinct_ind_data$year, years, "==")
colnames(dummies) <- years
data_ind_dummies <-
as_tibble(dummies) %>%
mutate(idind = distinct_ind_data$idind) %>%
group_by(idind) %>%
summarise(across(.fns = sum)) %>%
ungroup()
gc()
### Exercise 3
## 3.1
# Note that there are 2 households that are in the "datind" data set but not in the "dathh" data set,
data_ind %>%
filter(! idmen %in% data_hh$idmen) %>%
distinct(idmen)
# while all households in the "dathh" data set are in the "datind" data set.
data_hh %>%
filter(! idmen %in% data_ind$idmen) %>%
distinct(idmen)
# Since the question focus on the households, we use the "dathh" data set , rather than the merged one.
household_group <-
data_hh %>%
group_by(idmen) %>%
arrange(year)
year_enter_hh <-
household_group %>%
filter(row_number()==1) %>%
mutate(year_enter = year) %>%
select(idmen, year_enter)
year_exit_hh <-
household_group %>%
filter(row_number()==n()) %>%
mutate(year_exit = year + 1) %>%
select(idmen, year_exit)
years_in_survey <-
left_join(year_enter_hh, year_exit_hh)  %>%
mutate(years_in_survey = year_exit - year_enter)
# Check if gap year
years_in_survey <-
household_group %>%
summarise(length = n()) %>%
mutate(year_enter = year_enter_hh$year_enter,
year_exit = year_exit_hh$year_exit,
years_in_survey = years_in_survey$years_in_survey) %>%
mutate(gap = length < years_in_survey)
years_in_survey %>%
filter(gap == TRUE) %>%
nrow()
# Check if gap year
years_in_survey <-
household_group %>%
summarise(length = n()) %>%
mutate(year_enter = year_enter_hh$year_enter,
year_exit = year_exit_hh$year_exit,
years_in_survey = years_in_survey$years_in_survey) %>%
mutate(gap = length < years_in_survey) %>%
ungroup()
years_in_survey %>%
filter(gap == TRUE) %>%
nrow()
View(years_in_survey)
View(household_group)
# Check if gap year
years_in_survey <-
household_group %>%
summarise(length = n()) %>%
mutate(year_enter = year_enter_hh$year_enter,
year_exit = year_exit_hh$year_exit,
years_in_survey = years_in_survey$years_in_survey) %>%
mutate(gap = length < years_in_survey) %>%
years_in_survey %>%
filter(gap == TRUE) %>%
nrow()
# Check if gap year
years_in_survey <-
household_group %>%
summarise(length = n()) %>%
mutate(year_enter = year_enter_hh$year_enter,
year_exit = year_exit_hh$year_exit,
years_in_survey = years_in_survey$years_in_survey) %>%
mutate(gap = length < years_in_survey)
years_in_survey %>%
filter(gap == TRUE) %>%
nrow()
# Plot the distributions of the time spent in the panel but consider different cases:
# consecutive years: only count consecutive years and ignore any household with gap year
# total years: count the total years a household spent in the panel regardless there is a gap year or not
years_in_survey %>%
filter(gap == FALSE) %>%
ggplot() +
geom_density(aes(x = years_in_survey, color="consecutive years"), bw = 0.5) +
geom_density(data = years_in_survey, aes(x = length, color="total years"), bw = 0.5) +
scale_color_manual("", breaks=c("consecutive years", "total years"), values = c("blue","red")) +
guides(color = guide_legend(override.aes = list(fill = c("blue", "red"))))
