install.packages("hmisc")
install.packages(c("assertive.base", "backports", "BH", "callr", "cli", "colorspace", "cpp11", "crayon", "curl", "data.table", "desc", "digest", "dplyr", "ellipsis", "fansi", "farver", "generics", "ggplot2", "glue", "highr", "httpuv", "installr", "isoband", "jsonlite", "knitr", "labeling", "later", "lifecycle", "lubridate", "magrittr", "mime", "openssl", "pillar", "pkgbuild", "pkgload", "processx", "promises", "ps", "R6", "Rcpp", "RcppArmadillo", "RcppGSL", "RcppZiggurat", "readstata13", "Rfast", "rlang", "rprojroot", "rstudioapi", "stringi", "testthat", "tibble", "tidyr", "tidyselect", "utf8", "vctrs", "viridisLite", "withr", "xfun"))
install.packages("Hmisc")
install.packages("gdata")
install.packages("boot")
#1
require(actuar)
R.version
rm(list = ls())
library(tidyverse)
library(ggplot2)
library(scales)
library(ineq) # For double checking
setwd("C:/Users/boblin/Documents/GitHub/Econ613/Assignments/A1")
### Exercise 2
## 2.1.1
years = 2004:2019
filenames = paste(rep("datind", length(years)), years, ".csv", sep = "")
data_ind <- map_dfr(filenames, read_datind)
data_ind_clear <- # delete duplicate data
data_ind %>%
distinct(idind, year, .keep_all = TRUE)
read_dathh <- function(filename){
path <- paste("./Data/", filename, sep = "")
return(
suppressMessages( # to suppress the message that arises from reading a column without name
read_csv(path,
col_types = list(idmen = "c") # read "idmen" as character
)) %>%
mutate(across(c(idmen, mstatus, move, location), as_factor)) %>% # to reduce the size of data set
select(!starts_with("...")) # remove first column
)
}
read_datind <- function(filename){
path <- paste("./Data/", filename, sep = "")
return(
suppressMessages( # to suppress the message that arises from reading a column without name
read_csv(path,
col_types = list(idind = "c", idmen = "c", profession = "c") # read "idind","idmen", and "profession" as character
)) %>%
mutate(across(c(idind, idmen, empstat, profession, gender), as_factor)) %>% # to reduce the size of data set
select(!starts_with("...")) # remove first column
)
}
### Exercise 2
## 2.1.1
years = 2004:2019
filenames = paste(rep("datind", length(years)), years, ".csv", sep = "")
data_ind <- map_dfr(filenames, read_datind)
data_ind_clear <- # delete duplicate data
data_ind %>%
distinct(idind, year, .keep_all = TRUE)
## 2.1.2
filenames = paste(rep("dathh", length(years)), years, ".csv", sep = "")
data_hh <- map_dfr(filenames, read_dathh)
## 2.1.3
tbl_vars(data_ind)[tbl_vars(data_ind_clear) %in% tbl_vars(data_hh)]
## 2.1.4
data_merged <- left_join(data_ind_clear, data_hh, by = c("idmen", "year"))
## 3.2
data_datent <-
data_merged %>%
mutate(year_is_datent = (datent == year))
# Report first ten observations
data_datent %>%
select(idind, idmen, year, datent, year_is_datent) %>%
slice(1:10)
# Report share per year
datent_percentage <-
data_datent %>%
group_by(year) %>%
summarise(datent_rate = mean(year_is_datent, na.rm=TRUE))
datent_percentage %>%
ggplot(aes(x = year, y = datent_rate)) +
geom_line()
## 3.3
data_migration <-
data_merged %>%
mutate(migration = ((myear == year) & !is.na(myear)) | ((move == 2)& !is.na(move))) %>%
mutate(migration = ifelse( is.na(myear) & is.na(move) , NA, migration))
# Report first ten observations
data_migration %>%
select(idind, idmen, year, myear, move, migration) %>%
slice(1:10)
# Report share per year
migration_percentage <-
data_migration %>%
group_by(year) %>%
summarise(migration_rate = mean(migration, na.rm = TRUE))
migration_percentage %>%
ggplot(aes(x = year, y = migration_rate)) +
geom_line()
## 3.4
left_join(datent_percentage, migration_percentage) %>%
ggplot(aes(x = year)) +
geom_line(aes(y = datent_rate), color = "red") +
geom_line(aes(y = migration_rate), color = "blue")
View(data_merged)
?map_dfr
a <- lapply(filenames,read_datind)
### Exercise 2
## 2.1.1
years = 2004:2019
filenames = paste(rep("datind", length(years)), years, ".csv", sep = "")
a <- lapply(filenames,read_datind)
b <- do.call("rbind",a)
View(b)
b <- do.call(rbind,a)
b <- do.call(rbind.data.frame,a)
View(b)
b <- do.call(rbind,a)
View(b)
View(a)
?as.data.frame
c <- do.call(as.data.frame, a)
View(c)
?do.call
a
as.data.frame(a)
?rbind.data.frame
?rbind
?rbind.data.frame
as.data.frame(a[[1]])
a1 <- as.data.frame(a[[1]])
View(a)
a2 <- as.data.frame(b[[1]])
b1 <- c(a1,a2)
View(b1)
View(a)
View(b)
View(b1)
View(a)
b1 <- list(a1,a2)
do.call(rbind,b1)
do.call(rbind.data.frame,b1)
View(b1)
View(a)
do.call(rbind,b1)
a1 <- as.data.frame(a[[1]])
a2 <- as.data.frame(a[[2]])
b1 <- list(a1,a2)
do.call(rbind,b1)
View(b1)
### Exercise 2
## 2.1.1
years = 2004:2019
filenames = paste(rep("datind", length(years)), years, ".csv", sep = "")
data_ind <- map_dfr(filenames, read_datind)
data_ind_clear <- # delete duplicate data
data_ind %>%
distinct(idind, year, .keep_all = TRUE)
