# utility = alpha_choice + beta_quality * quality
# choice_rev ~ quality
# Define (relative) quality = average program quality in choice rev / individual score
ind_recode_quality_first <-
ind_recode %>%
filter(school_rank == 1 & program_rank == 1 & !is.na(scode_rev) & !is.na(pgm_rev)) %>%
select(index, score, choice_rev, schoolcode, choicepgm) %>%
left_join(recode_quality, by = "choice_rev") %>%
mutate(relative_quality = recode_quality / score) %>%
na.omit
ind_recode_quality_first
ind_recode
recode_quality
recode_quality <-
ind_recode %>%
filter(enter == TRUE) %>%
group_by(choice_rev) %>%
summarise(recode_quality = mean(score))
recode_quality <-
choice_rev %>%
left_join(recode_quality, by = "choice_rev")
recode_quality
### 6
# conditional logistic regression
# utility = alpha_choice + beta_quality * quality
# choice_rev ~ quality
# Define (relative) quality = average program quality in choice rev / individual score
ind_recode_quality_first <-
ind_recode %>%
filter(school_rank == 1 & program_rank == 1 & !is.na(scode_rev) & !is.na(pgm_rev)) %>%
select(index, score, choice_rev, schoolcode, choicepgm) %>%
left_join(recode_quality, by = "choice_rev") %>%
mutate(relative_quality = recode_quality / score) %>%
na.omit
ind_recode_quality_first
set.seed(123)
ind_recode_quality_first.sample <-
ind_recode_quality_first %>%
slice(sample(nrow(ind_recode_quality_first), size = nrow(ind_recode_quality_first)/250, replace = FALSE))
choices_q6 <-
ind_recode_quality_first.sample %>%
select(choice_rev) %>%
distinct() %>%
arrange(choice_rev)
temp_quality_first_mlogit <-
ind_recode_quality_first.sample %>%
select(score, choice_rev) %>%
mlogit.data(choice = "choice_rev", shape = "wide")
reshape_temp_quality_first_mlogit <-
temp_quality_first_mlogit %>% as_tibble %>% select(1:4)%>%
rename(dummy = choice_rev, choice_rev = alt) %>%
left_join(recode_quality, by = "choice_rev") %>%
mutate(relative_quality = recode_quality / score) %>%
rename(id = chid)
#write.dta(reshape_temp_quality_first_mlogit, "q6_sample_stata.dta")
reshape_quality_first_mlogit <-
dfidx(reshape_temp_quality_first_mlogit, idx = c("id", "choice_rev"))
mlogit_result_q6 <- mlogit(dummy ~ relative_quality , data = reshape_quality_first_mlogit)
best_guess_q6 <- summary(mlogit_result_q6)$coefficients
reshape_temp_quality_first_mlogit %>% pivot_wider(names_from = choice_rev, values_from = recode_quality)
ind_recode_quality_first_d.sample <-
ind_recode_quality_first.sample %>%
add_dummies(factor = "choice_rev") %>%
mutate(relative_quality = ind_recode_quality_first.sample$relative_quality)
for(choice in choices_q6 %>% pull(1)){
recode_quality_each <- recode_quality[recode_quality["choice_rev"] == choice, "recode_quality"] %>% pull(1)
ind_recode_quality_first_d.sample[paste("relative_quality_by", choice, sep = "_")] = recode_quality_each / ind_recode_quality_first.sample$score
}
set.seed(123)
own_result_q6 <- max_log_likelihood(data = ind_recode_quality_first_d.sample,
choices = choices_q6, times = 3,
beta_start_min = -1, beta_start_max = 1, type = "conditional",
best_guess = best_guess_q6, change_by_choice = 1)
estimates_q6 <- cbind(best_guess_q6, own_result_q6$par)
colnames(estimates_q6) = c("mlogit : est","own : est")
estimates_q6
own_marginal_effect_average_q6 <- lapply(choices_q6 %>% pull(1), marginal_effect_average,
coefficients = own_result_q6$par, data = ind_recode_quality_first_d.sample,
choices = choices_q6, type = "conditional", h = 1/1000,
change_by_choice = 1, choice_wise = 1) %>% as.data.frame()
rownames(own_marginal_effect_average_q6) = paste("relative_quality_change_in", choices_q6 %>% pull(1) ,sep = "_")
colnames(own_marginal_effect_average_q6) = paste("marginal_effect_on_prob", choices_q6 %>% pull(1) ,sep = "_")
own_marginal_effect_average_q6
# multinomial logistic regression
# utility = alpha_choice + beta_score_choice * score
# choice_rev ~ 0 | score
ind_recode_score_first <-
ind_recode %>%
filter(school_rank == 1 & program_rank == 1 & !is.na(scode_rev) & !is.na(choice_rev)) %>%
select(score, choice_rev, scode_rev, pgm_rev) %>%
na.omit
set.seed(123)
ind_recode_score_first.sample <-
ind_recode_score_first %>%
slice(sample(nrow(ind_recode_score_first), size = nrow(ind_recode_score_first)/250, replace = FALSE))
#write.dta(ind_recode_score_first.sample, "q5_sample_stata.dta")
ind_recode_score_first_mlogit <-
ind_recode_score_first.sample %>%
select(score, choice_rev) %>%
mlogit.data(choice = "choice_rev", shape = "wide")
mlogit_result_q5 <- mlogit(choice_rev ~ 1 | score, data = ind_recode_score_first_mlogit)
### 7
# Using model 2 would be more appropriate to see the effect of excluding "others".
# Model 2 studies the effect school-program quality on students' choices.
# When excluding "others", the relative school-program quality changes.
# Hence, we can see if such change has influence on the probability of students' choices.
# On the other hand, model 1 studies the effect of each student's own score on his choice.
# In particular, the model studies whether student choosing certain choices have higher or lower scores compared with the base choice.
# Then, excluding "others" and comparing the results does not give much economic sense.
utility <- choices_utility(coefficients = own_result_q6$par, type = "conditional", choices = choices_q6, data = ind_recode_quality_first_d.sample, change_by_choice = 1)
prob <-
choices_prob(result_data = utility, choices = choices_q6) %>%
select(starts_with("choice_prob"))
compare_base_prob <- prob
for (choice in choices_q6 %>% pull(1)) {
compare_base_prob[paste("relative_prob", choice, sep = "_")] = compare_base_prob[paste("choice_prob", choice, sep = "_")] / compare_base_prob[paste("choice_prob", choices_q6[1,1], sep = "_")]
}
choices_q6_exclude <-
choices_q6 %>%
left_join(choice_rev, by = "choice_rev") %>%
filter(! pgm_rev == "others") %>%
select(choice_rev)
prob_exclude <-
choices_prob(result_data = utility, choices = choices_q6_exclude) %>%
select(starts_with("choice_prob"))
compare_base_prob_ex <- prob_exclude
for (choice in choices_q6_exclude %>% pull(1)) {
compare_base_prob_ex[paste("relative_prob", choice, sep = "_")] = compare_base_prob_ex[paste("choice_prob", choice, sep = "_")] / compare_base_prob_ex[paste("choice_prob", choices_q6_exclude[1,1], sep = "_")]
}
# How many times of each individual's predicted choices probability after exclusion are compared with before exclusion
compare_base_prob_ex / (compare_base_prob %>% select(!ends_with("others")))
### 4
ind_recode <-
ind_school_program_enter %>%
mutate(scode_rev = substr(schoolcode, 1, 3),
pgm_rev = ifelse(choicepgm == "General Arts" | choicepgm == "Visual Arts", "arts",
ifelse(choicepgm == "Business" | choicepgm == "Home Economics", "economics",
ifelse(choicepgm == "General Science", "science", "others"))),
choice_rev = paste(scode_rev, pgm_rev, sep = "_"))
choice_rev <-
school_program %>%
mutate(scode_rev = substr(schoolcode, 1, 3),
pgm_rev = ifelse(choicepgm == "General Arts" | choicepgm == "Visual Arts", "arts",
ifelse(choicepgm == "Business" | choicepgm == "Home Economics", "economics",
ifelse(choicepgm == "General Science", "science", "others"))),
choice_rev = paste(scode_rev, pgm_rev, sep = "_")) %>%
select(scode_rev, pgm_rev, choice_rev) %>%
distinct()
recode_cutoff <-
ind_recode %>%
filter(enter == TRUE) %>%
group_by(choice_rev) %>%
arrange(score, .by_group = TRUE) %>%
select(choice_rev, score) %>%
rename(recode_cutoff = score) %>%
slice_head()
recode_cutoff <-
choice_rev %>%
left_join(recode_cutoff, by = "choice_rev")
recode_cutoff
recode_quality <-
ind_recode %>%
filter(enter == TRUE) %>%
group_by(choice_rev) %>%
summarise(recode_quality = mean(score))
recode_quality <-
choice_rev %>%
left_join(recode_quality, by = "choice_rev")
recode_quality
ind_recode_score_first <-
ind_recode %>%
filter(school_rank == 1 & program_rank == 1 & !is.na(scode_rev) & !is.na(choice_rev)) %>%
select(score, choice_rev, scode_rev, pgm_rev) %>%
na.omit
set.seed(123)
ind_recode_score_first.sample <-
ind_recode_score_first %>%
slice(sample(nrow(ind_recode_score_first), size = nrow(ind_recode_score_first)/250, replace = FALSE))
write.dta(ind_recode_score_first.sample, "q5_sample_stata.dta")
### 6
# conditional logistic regression
# utility = alpha_choice + beta_quality * quality
# choice_rev ~ quality
# Define (relative) quality = average program quality in choice rev / individual score
ind_recode_quality_first <-
ind_recode %>%
filter(school_rank == 1 & program_rank == 1 & !is.na(scode_rev) & !is.na(pgm_rev)) %>%
select(index, score, choice_rev, schoolcode, choicepgm) %>%
left_join(recode_quality, by = "choice_rev") %>%
mutate(relative_quality = recode_quality / score) %>%
na.omit
set.seed(123)
ind_recode_quality_first.sample <-
ind_recode_quality_first %>%
slice(sample(nrow(ind_recode_quality_first), size = nrow(ind_recode_quality_first)/250, replace = FALSE))
ind_recode_quality_first <-
ind_recode %>%
filter(school_rank == 1 & program_rank == 1 & !is.na(scode_rev) & !is.na(pgm_rev)) %>%
select(index, score, choice_rev, schoolcode, choicepgm) %>%
left_join(recode_quality, by = "choice_rev") %>%
mutate(relative_quality = recode_quality / score) %>%
na.omit
set.seed(123)
ind_recode_quality_first.sample <-
ind_recode_quality_first %>%
slice(sample(nrow(ind_recode_quality_first), size = nrow(ind_recode_quality_first)/250, replace = FALSE))
choices_q6 <-
ind_recode_quality_first.sample %>%
select(choice_rev) %>%
distinct() %>%
arrange(choice_rev)
temp_quality_first_mlogit <-
ind_recode_quality_first.sample %>%
select(score, choice_rev) %>%
mlogit.data(choice = "choice_rev", shape = "wide")
reshape_temp_quality_first_mlogit <-
temp_quality_first_mlogit %>% as_tibble %>% select(1:4)%>%
rename(dummy = choice_rev, choice_rev = alt) %>%
left_join(recode_quality, by = "choice_rev") %>%
mutate(relative_quality = recode_quality / score) %>%
rename(id = chid)
write.dta(reshape_temp_quality_first_mlogit, "q6_sample_stata.dta")
compare_base_prob_ex
compare_base_prob %>% select(!ends_with("others"))
compare_base_prob_ex
# How many times of each individual's predicted choices probability after exclusion are compared with before exclusion
compare_base_prob_ex / (compare_base_prob %>% select(!ends_with("others")))[1:5,1:20]
compare_base_prob %>% select(!ends_with("others"))
compare_base_prob_ex
compare_base_prob_b %>% select(!ends_with("others"))
compare_base_prob_b <- compare_base_prob %>% select(!ends_with("others"))
compare_base_prob_b <- compare_base_prob %>% select(!ends_with("others"))
compare_base_prob_ex
# How many times of each individual's predicted choices probability after exclusion are compared with before exclusion
(compare_base_prob_ex / compare_base_prob_b)[1:5,1:20]
compare_base_prob_ex
compare_base_prob_b
compare_base_prob_ex
# How many times of each individual's predicted choices probability after exclusion are compared with before exclusion
(compare_base_prob_ex / compare_base_prob_b)[1:5,1:20]
ind_school_loc_distance
View(ind_school_loc_distance)
ind_school_loc_distance %>% select(index, schoolcode, distance)
ind_school_loc_distance <-
ind_school_program_enter %>%
filter(school_rank == 1 & program_rank == 1 & !is.na(scode_rev) & !is.na(choice_rev)) %>%
left_join(school_loc, by = "schoolcode") %>%
left_join(junior_loc, by = "jssdistrict") %>%
rename(jsslong = point_x, jsslat = point_y) %>%
mutate(distance = sqrt( (69.172 * (ssslong-jsslong) * cos(jsslat / 57.3) )^2 + (69.172 * (ssslat-jsslat) )^2  )   )
ind_school_program_enter
ind_school_loc_distance <-
ind_school_program_enter %>%
left_join(school_loc, by = "schoolcode") %>%
left_join(junior_loc, by = "jssdistrict") %>%
rename(jsslong = point_x, jsslat = point_y) %>%
mutate(distance = sqrt( (69.172 * (ssslong-jsslong) * cos(jsslat / 57.3) )^2 + (69.172 * (ssslat-jsslat) )^2  )   )
View(ind_school_loc_distance)
ind_school_loc_distance %>% select(index, schoolcode, choicepgm, distance)
ind_school_loc_distance <-
ind_school_program_enter %>%
filter(program_rank == school_rank) %>%
left_join(school_loc, by = "schoolcode") %>%
left_join(junior_loc, by = "jssdistrict") %>%
rename(jsslong = point_x, jsslat = point_y) %>%
mutate(distance = sqrt( (69.172 * (ssslong-jsslong) * cos(jsslat / 57.3) )^2 + (69.172 * (ssslat-jsslat) )^2  )   )
ind_school_loc_distance %>% select(index, schoolcode, choicepgm, distance)
View(ind_school_loc)
ind_recode <-
ind_school_program_enter %>%
mutate(scode_rev = substr(schoolcode, 1, 3),
pgm_rev = ifelse(choicepgm == "General Arts" | choicepgm == "Visual Arts", "arts",
ifelse(choicepgm == "Business" | choicepgm == "Home Economics", "economics",
ifelse(choicepgm == "General Science", "science", "others"))),
choice_rev = paste(scode_rev, pgm_rev, sep = "_"))
choice_rev <-
school_program %>%
mutate(scode_rev = substr(schoolcode, 1, 3),
pgm_rev = ifelse(choicepgm == "General Arts" | choicepgm == "Visual Arts", "arts",
ifelse(choicepgm == "Business" | choicepgm == "Home Economics", "economics",
ifelse(choicepgm == "General Science", "science", "others"))),
choice_rev = paste(scode_rev, pgm_rev, sep = "_")) %>%
ind_recode_score_first <-
ind_recode %>%
filter(school_rank == 1 & program_rank == 1 & !is.na(scode_rev) & !is.na(choice_rev)) %>%
select(score, choice_rev, scode_rev, pgm_rev) %>%
na.omit
set.seed(123)
ind_recode_score_first.sample <-
ind_recode_score_first %>%
slice(sample(nrow(ind_recode_score_first), size = nrow(ind_recode_score_first)/250, replace = FALSE))
write.dta(ind_recode_score_first.sample, "q5_sample_stata.dta")
ind_recode_score_first <-
ind_recode %>%
filter(school_rank == 1 & program_rank == 1 & !is.na(scode_rev) & !is.na(choice_rev)) %>%
select(score, choice_rev, scode_rev, pgm_rev) %>%
na.omit
ind_recode <-
ind_school_program_enter %>%
mutate(scode_rev = substr(schoolcode, 1, 3),
pgm_rev = ifelse(choicepgm == "General Arts" | choicepgm == "Visual Arts", "arts",
ifelse(choicepgm == "Business" | choicepgm == "Home Economics", "economics",
ifelse(choicepgm == "General Science", "science", "others"))),
choice_rev = paste(scode_rev, pgm_rev, sep = "_"))
choice_rev <-
school_program %>%
mutate(scode_rev = substr(schoolcode, 1, 3),
pgm_rev = ifelse(choicepgm == "General Arts" | choicepgm == "Visual Arts", "arts",
ifelse(choicepgm == "Business" | choicepgm == "Home Economics", "economics",
ifelse(choicepgm == "General Science", "science", "others"))),
choice_rev = paste(scode_rev, pgm_rev, sep = "_")) %>%
select(scode_rev, pgm_rev, choice_rev) %>%
distinct()
recode_cutoff <-
ind_recode %>%
filter(enter == TRUE) %>%
group_by(choice_rev) %>%
arrange(score, .by_group = TRUE) %>%
select(choice_rev, score) %>%
rename(recode_cutoff = score) %>%
slice_head()
recode_cutoff <-
choice_rev %>%
left_join(recode_cutoff, by = "choice_rev")
recode_cutoff
recode_quality <-
ind_recode %>%
filter(enter == TRUE) %>%
group_by(choice_rev) %>%
summarise(recode_quality = mean(score))
recode_quality <-
choice_rev %>%
left_join(recode_quality, by = "choice_rev")
recode_quality
### 5
add_dummies <- function(data, factor, other_var = ""){
if(other_var != ""){
formula <- paste("~ ", factor, " + ", factor, " * " , other_var)
}
else{
formula <- paste("~ ", factor)
}
formula <- as.formula(formula)
factor_dummies <- model.matrix(formula, data)
new_data <- as_tibble(factor_dummies[, -1])
return(new_data)
}
choices_utility <- function(coefficients, data, choices, type, h = 0, change_by_choice = 0, change_var = ""){
if(type == "conditional"){
new_data <- as.matrix(data[, 1:nrow(choices)])
}
else if(type == "multinomial"){
new_data <- as.matrix(data[, 1:((nrow(choices)-1)*2)])
}
result_data <- data
change_data <- new_data
change_data[, (nrow(choices)):ncol(change_data)][change_data[, (nrow(choices)):ncol(change_data)] > 0] = h
change_data[, 1:(nrow(choices)-1)] = 0
new_data = new_data + change_data
chosen_utility <- new_data %*% coefficients
result_data["chosen_utility"] = chosen_utility
if(type == "conditional"){
new_data[, 1:nrow(choices)-1] = 0
if(change_by_choice != 0){
new_data[, nrow(choices)] = as.matrix(data)[,nrow(choices) + 1]
}
if(change_by_choice != 0 & change_var != ""){
new_h = h * as.numeric((choices[1,1] == change_var))
}
else{new_h = h}
new_data[, nrow(choices)] = new_data[, nrow(choices)] + new_h
}
else if(type == "multinomial"){
new_data[,] = 0
}
result_data[paste("utility", choices[1,1], sep = "_")] = new_data %*% coefficients
for(i in 2:(nrow(choices))){
new_data[,] = 0
new_data[, i-1] = 1
if(type == "multinomial"){
new_data[, nrow(choices)-2+i] = as.matrix(data)[, ncol(new_data)+1] + h
}
else if(type == "conditional"){
if(change_by_choice != 0){
if(change_var != ""){
new_h = h * as.numeric((choices[i,1] == change_var))
}
else{new_h = h}
new_data[, nrow(choices)] = as.matrix(data)[, nrow(choices) + i] + new_h
}
else{
new_data[, nrow(choices)] = as.matrix(data)[, nrow(choices)] + h
}
}
choice_utility <- new_data %*% coefficients
result_data[paste("utility", choices[i,1], sep = "_")] = choice_utility
}
return(result_data)
}
find_index <- function(name, add_before, sep, data){
pattern <- paste(add_before, name, sep = sep)
return(grep(pattern, colnames(data)))
}
choices_prob <- function(result_data, choices){
index <- sapply(choices %>% pull(1), find_index, add_before = "utility", sep = "_", data = result_data)
result_data <- result_data %>% mutate(sum_exp_utility = rowSums(across(.cols = all_of(index), .fns = exp)))
result_data <- result_data %>% mutate(across(all_of(index), function(x) exp(x)/sum_exp_utility))
chosen_prob <- with(result_data, exp(chosen_utility) / sum_exp_utility)
chosen_prob[chosen_prob > 0.99999] = 0.99999
chosen_prob[chosen_prob < 0.00001] = 0.00001
result_data["chosen_prob"] = chosen_prob
for (choice in choices %>% pull(1)) {
colnames(result_data)[which(names(result_data) == choice)] = paste("choice_prob", choice, sep = "_")
assign("choice_prob",   with(result_data, get(paste("choice_prob", choice, sep = "_"))))
choice_prob[choice_prob > 0.99999] = 0.99999
choice_prob[choice_prob < 0.00001] = 0.00001
result_data[paste("choice_prob", choice, sep = "_")] =  choice_prob
}
return(result_data %>% select(starts_with("choice_prob"), "chosen_prob"))
}
likelihood_logit_all <- function(coefficients, data, choices, type, h = 0, change_by_choice = 0, change_var = ""){
result_data <- choices_utility(coefficients = coefficients, data = data, choices = choices,
type = type, h = h, change_by_choice = change_by_choice, change_var = change_var)
prob_data <- choices_prob(result_data = result_data, choices = choices)
return(prob_data)
}
likelihood_logit <- function(coefficients, data, choices, type, h = 0, change_by_choice = 0){
result_data <- likelihood_logit_all(data = data, coefficients = coefficients, choices = choices, type = type, h = h, change_by_choice = change_by_choice)
prob_y <- result_data %>% pull(chosen_prob)
return(prob_y)
}
log_likelihood_logit <- function(coefficients, data, choices, type, change_by_choice = 0){
prob_y <- likelihood_logit(coefficients = coefficients, data = data, choices = choices, type = type, change_by_choice = change_by_choice)
log_likelihood <- sum(log(prob_y))
return(log_likelihood)
}
max_log_likelihood <- function(data, choices, times, beta_start_min, beta_start_max, best_guess = "", type, change_by_choice = 0){
if(times == 1){
best_start_point <- runif(n = ncol(data), min = beta_start_min, max = beta_start_max)
}
else{
empty_list <- vector(mode = "list", length = times)
if(class(best_guess) == "character"){
start_points <- lapply(empty_list, function(x) runif(n = ncol(data), min = beta_start_min, max = beta_start_max))
results <- lapply(X = start_points, FUN = optim,
fn = log_likelihood_logit,
method = "BFGS",
control = list(maxit = 1000, fnscale = -1),
data = data, choices = choices, type = type, change_by_choice = change_by_choice)
logLik_results <- lapply(results, "[[", 2)
max_logLik <- max(unlist(logLik_results))
positions <- which(unlist(logLik_results) == max_logLik)
best_start_point <- start_points[[positions[1]]]
}
else{
best_start_point <- best_guess
}
}
best_result <- optim(best_start_point,
fn = log_likelihood_logit,
method = "BFGS",
control = list(trace=6, maxit = 1000, fnscale = -1),
data = data, choices = choices, type = type, change_by_choice = change_by_choice,
hessian = FALSE)
return(best_result)
}
# multinomial logistic regression
# utility = alpha_choice + beta_score_choice * score
# choice_rev ~ 0 | score
ind_recode_score_first <-
ind_recode %>%
filter(school_rank == 1 & program_rank == 1 & !is.na(scode_rev) & !is.na(choice_rev)) %>%
select(score, choice_rev, scode_rev, pgm_rev) %>%
na.omit
ind_recode_score_first <-
ind_recode %>%
filter(school_rank == 1 & program_rank == 1 & !is.na(scode_rev) & !is.na(choice_rev)) %>%
select(score, choice_rev, scode_rev, pgm_rev) %>%
na.omit
set.seed(123)
ind_recode_score_first.sample <-
ind_recode_score_first %>%
slice(sample(nrow(ind_recode_score_first), size = nrow(ind_recode_score_first)/250, replace = FALSE))
write.dta(ind_recode_score_first.sample, "q5_sample_stata.dta")
ind_recode_score_first_mlogit <-
ind_recode_score_first.sample %>%
select(score, choice_rev) %>%
mlogit.data(choice = "choice_rev", shape = "wide")
mlogit_result_q5 <- mlogit(choice_rev ~ 1 | score, data = ind_recode_score_first_mlogit)
compare_base_prob_b
compare_base_prob_b %>% summarise_all(mean)
compare_base_prob_ex %>% summarise_all(mean)
# How many times of each individual's predicted choices probability after exclusion are compared with before exclusion
(compare_base_prob_ex / compare_base_prob_b)[1:5,1:20]
average_b <- compare_base_prob_b %>% summarise_all(mean)
average_ex <- compare_base_prob_ex %>% summarise_all(mean)
average_ex / average_b
# How many times of each individual's predicted choices probability after exclusion are compared with before exclusion
(compare_base_prob_ex / compare_base_prob_b)[1:5,1:20]
average_ex / average_b
average_b
average_ex
compare_base_prob_b
compare_base_prob_ex
# How many times of each individual's predicted choices probability after exclusion are compared with before exclusion
(compare_base_prob_ex / compare_base_prob_b)[1:5,1:20]
average_ex / average_b
# How many times of each individual's predicted choices probability after exclusion are compared with before exclusion
(compare_base_prob_ex / compare_base_prob_b)[1:5,1:20] %>% summarise_all(mean)
# How many times of each individual's predicted choices probability after exclusion are compared with before exclusion
(compare_base_prob_ex / compare_base_prob_b)[1:5,1:20]
(compare_base_prob_ex / compare_base_prob_b) %>% summarise_all(mean)
