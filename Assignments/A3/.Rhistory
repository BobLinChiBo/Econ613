result_data[paste("choice_prob", choice, sep = "_")] =  choice_prob
}
print(colnames(result_data))
return(result_data %>% select(starts_with("choice_prob"), "chosen_prob"))
}
prob <-
choices_prob(result_data = utility, choices = choices_q6) %>%
select(starts_with("choice_prob"))
choices_prob <- function(result_data, choices){
index <- sapply(choices %>% pull(1), find_index, add_before = "utility", sep = "_", data = result_data)
result_data <- result_data %>% mutate(sum_exp_utility = rowSums(across(.cols = all_of(index), .fns = exp)))
result_data <- result_data %>% mutate(across(all_of(index), function(x) exp(x)/sum_exp_utility))
chosen_prob <- with(result_data, exp(chosen_utility) / sum_exp_utility)
chosen_prob[chosen_prob > 0.99999] = 0.99999
chosen_prob[chosen_prob < 0.00001] = 0.00001
result_data["chosen_prob"] = chosen_prob
for (choice in choices %>% pull(1)) {
colnames(result_data)[which(names(result_data) == choice)] = paste("choice_prob", choice, sep = "_")
assign("choice_prob",   with(result_data, get(paste("choice_prob", choice, sep = "_"))))
choice_prob[choice_prob > 0.99999] = 0.99999
choice_prob[choice_prob < 0.00001] = 0.00001
result_data[paste("choice_prob", choice, sep = "_")] =  choice_prob
}
return(result_data %>% select(starts_with("choice_prob"), "chosen_prob"))
}
View(likelihood_logit_all)
# marginal effect
marginal_effect_average <- function(coefficients, data, choices, type, h, change_by_choice = 0){
h_likelihood <- likelihood_logit_all(coefficients, data, choices, type, h, change_by_choice)
likelihood_h <- likelihood_logit_all(coefficients, data, choices, type, -h, change_by_choice)
marginal_effect_ind <- (h_likelihood - likelihood_h) / (2*h)
marginal_effect_average <-
marginal_effect_ind %>% summarise_all(mean) %>%
select(starts_with("choice_prob")) %>% t()
colnames(marginal_effect_average) = "average_marginal_effect"
return(marginal_effect_average)
}
own_marginal_effect_average_q5 <-
marginal_effect_average(own_result_q5$par, data = ind_recode_score_first_d.sample, choices = choices_q5, type = "multinomial", h = 1/1000)
own_marginal_effect_average_q5
# choices_mean_q6 <-
#   sapply(choices_q6 %>% pull(choice_rev), choice_mean,
#          data = ind_recode_quality_first,
#          choice_var = "choice_rev", mean_var = "program_quality") %>%
#   as.data.frame()
# colnames(choices_mean_q6) = "program_quality"
#all_mean <- ind_recode_quality_first.sample %>% pull(program_quality) %>% mean()
#choices_mean_q6 <- choices_mean_q6 %>% mutate(program_quality = all_mean)
own_marginal_effect_average_q6 <-
marginal_effect_average(own_result_q6$par, data = ind_recode_quality_first_d.sample, choices = choices_q6, type = "conditional", h = 1/1000, change_by_choice = 1)
own_marginal_effect_average_q6
View(choices_utility)
### 7
# Using model 2 would be more appropriate to see the effect of excluding "others".
# Model 2 studies the effect school-program quality on students' choices.
# When excluding "others", the relative school-program quality changes.
# Hence, we can see if such change has influence on the probability of students' choices.
# On the other hand, model 1 studies the effect of each student's own score on his choice.
# In particular, the model studies whether student choosing certain choices have higher or lower scores compared with the base choice.
# Then, excluding "others" and comparing the results does not give much economic sense.
utility <- choices_utility(coefficients = own_result_q6$par, type = "conditional", choices = choices_q6, data = ind_recode_quality_first_d.sample, change_by_choice = 1)
prob <-
choices_prob(result_data = utility, choices = choices_q6) %>%
select(starts_with("choice_prob"))
compare_base_prob <- prob
for (choice in choices_q6 %>% pull(1)) {
compare_base_prob[paste("relative_prob", choice, sep = "_")] = compare_base_prob[paste("choice_prob", choice, sep = "_")] / compare_base_prob[paste("choice_prob", choices_q6[1,1], sep = "_")]
}
choices_q6_exclude <-
choices_q6 %>%
left_join(choice_rev, by = "choice_rev") %>%
filter(! pgm_rev == "others") %>%
select(choice_rev)
prob_exclude <-
choices_prob(result_data = utility, choices = choices_q6_exclude) %>%
select(starts_with("choice_prob"))
compare_base_prob_ex <- prob_exclude
for (choice in choices_q6_exclude %>% pull(1)) {
compare_base_prob_ex[paste("relative_prob", choice, sep = "_")] = compare_base_prob_ex[paste("choice_prob", choice, sep = "_")] / compare_base_prob_ex[paste("choice_prob", choices_q6_exclude[1,1], sep = "_")]
}
View(compare_base_prob)
View(utility)
View(estimates_q6)
?starts_with
compare_base_prob %>% selcet(!ends_with("others"))
compare_base_prob %>% select(!ends_with("others"))
compare_base_prob_ex / (compare_base_prob %>% select(!ends_with("others")))
own_marginal_effect_average_q6
# marginal effect
marginal_effect_average <- function(coefficients, data, choices, type, h, change_by_choice = 0, choice_wise = 0){
h_likelihood <- likelihood_logit_all(coefficients, data, choices, type, h, change_by_choice)
likelihood_h <- likelihood_logit_all(coefficients, data, choices, type, -h, change_by_choice)
marginal_effect_ind <- (h_likelihood - likelihood_h) / (2*h)
marginal_effect_average <-
marginal_effect_ind %>% summarise_all(mean) %>%
select(starts_with("choice_prob")) %>% t()
colnames(marginal_effect_average) = "average_marginal_effect"
if(choice_wise != 0){
test <- data[1] >= -1
result <- vector()
for (i in 2:nrow(choices)) {
result_each = marginal_effect_ind[data[i-1] == 1,] %>% summarise_all(mean)
result = rbind(result, result_each)
test = test * (data[i-1] == 0)
}
result_0 =  marginal_effect_ind[test == 1,] %>% summarise_all(mean)
result = rbind(result_0, result)
return(result)
}
return(marginal_effect_average)
}
# choices_mean_q6 <-
#   sapply(choices_q6 %>% pull(choice_rev), choice_mean,
#          data = ind_recode_quality_first,
#          choice_var = "choice_rev", mean_var = "program_quality") %>%
#   as.data.frame()
# colnames(choices_mean_q6) = "program_quality"
#all_mean <- ind_recode_quality_first.sample %>% pull(program_quality) %>% mean()
#choices_mean_q6 <- choices_mean_q6 %>% mutate(program_quality = all_mean)
own_marginal_effect_average_q6 <-
marginal_effect_average(own_result_q6$par, data = ind_recode_quality_first_d.sample, choices = choices_q6, type = "conditional", h = 1/1000, change_by_choice = 1, choice_wise = 1)
own_marginal_effect_average_q6
choices_utility <- function(coefficients, data, choices, type, h = 0, change_by_choice = 0, change_var = ""){
if(type == "conditional"){
new_data <- as.matrix(data[, 1:nrow(choices)])
}
else if(type == "multinomial"){
new_data <- as.matrix(data[, 1:((nrow(choices)-1)*2)])
}
result_data <- data
change_data <- new_data
change_data[, (nrow(choices)):ncol(change_data)][change_data[, (nrow(choices)):ncol(change_data)] > 0] = h
change_data[, 1:(nrow(choices)-1)] = 0
new_data = new_data + change_data
chosen_utility <- new_data %*% coefficients
result_data["chosen_utility"] = chosen_utility
if(type == "conditional"){
new_data[, 1:nrow(choices)-1] = 0
if(change_by_choice != 0){
new_data[, nrow(choices)] = as.matrix(data)[,nrow(choices) + 1]
}
if(change_by_choice != 0 & change_var != ""){
new_h = h * (choices[1,1] == change_var)
}
else{new_h = h}
new_data[, nrow(choices)] = new_data[, nrow(choices)] + new_h
}
else if(type == "multinomial"){
new_data[,] = 0
}
result_data[paste("utility", choices[1,1], sep = "_")] = new_data %*% coefficients
for(i in 2:(nrow(choices))){
new_data[,] = 0
new_data[, i-1] = 1
if(type == "multinomial"){
new_data[, nrow(choices)-2+i] = as.matrix(data)[, ncol(new_data)+1] + h
}
else if(type == "conditional"){
if(change_by_choice != 0){
if(change_var != ""){
new_h = h * (choices[i,1] == change_var)
}
else{new_h = h}
new_data[, nrow(choices)] = as.matrix(data)[, nrow(choices) + i] + new_h
}
else{
new_data[, nrow(choices)] = as.matrix(data)[, nrow(choices)] + h
}
}
choice_utility <- new_data %*% coefficients
result_data[paste("utility", choices[i,1], sep = "_")] = choice_utility
}
return(result_data)
}
# marginal effect
marginal_effect_average <- function(coefficients, data, choices, type, h, change_by_choice = 0, choice_wise = 0, change_var = ""){
h_likelihood <- likelihood_logit_all(coefficients, data, choices, type, h, change_by_choice, change_var)
likelihood_h <- likelihood_logit_all(coefficients, data, choices, type, -h, change_by_choice, change_var)
marginal_effect_ind <- (h_likelihood - likelihood_h) / (2*h)
marginal_effect_average <-
marginal_effect_ind %>% summarise_all(mean) %>%
select(starts_with("choice_prob")) %>% t()
colnames(marginal_effect_average) = "average_marginal_effect"
if(choice_wise != 0){
test <- data[1] >= -1
result <- vector()
for (i in 2:nrow(choices)) {
result_each = marginal_effect_ind[data[i-1] == 1,] %>% summarise_all(mean)
result = rbind(result, result_each)
test = test * (data[i-1] == 0)
}
result_0 =  marginal_effect_ind[test == 1,] %>% summarise_all(mean)
result = rbind(result_0, result)
return(result)
}
return(marginal_effect_average)
}
choices_utility <- function(coefficients, data, choices, type, h = 0, change_by_choice = 0, change_var = ""){
if(type == "conditional"){
new_data <- as.matrix(data[, 1:nrow(choices)])
}
else if(type == "multinomial"){
new_data <- as.matrix(data[, 1:((nrow(choices)-1)*2)])
}
result_data <- data
change_data <- new_data
change_data[, (nrow(choices)):ncol(change_data)][change_data[, (nrow(choices)):ncol(change_data)] > 0] = h
change_data[, 1:(nrow(choices)-1)] = 0
new_data = new_data + change_data
chosen_utility <- new_data %*% coefficients
result_data["chosen_utility"] = chosen_utility
if(type == "conditional"){
new_data[, 1:nrow(choices)-1] = 0
if(change_by_choice != 0){
new_data[, nrow(choices)] = as.matrix(data)[,nrow(choices) + 1]
}
if(change_by_choice != 0 & change_var != ""){
new_h = h * (choices[1,1] == change_var)
}
else{new_h = h}
new_data[, nrow(choices)] = new_data[, nrow(choices)] + new_h
}
else if(type == "multinomial"){
new_data[,] = 0
}
result_data[paste("utility", choices[1,1], sep = "_")] = new_data %*% coefficients
for(i in 2:(nrow(choices))){
new_data[,] = 0
new_data[, i-1] = 1
if(type == "multinomial"){
new_data[, nrow(choices)-2+i] = as.matrix(data)[, ncol(new_data)+1] + h
}
else if(type == "conditional"){
if(change_by_choice != 0){
if(change_var != ""){
new_h = h * (choices[i,1] == change_var)
}
else{new_h = h}
new_data[, nrow(choices)] = as.matrix(data)[, nrow(choices) + i] + new_h
}
else{
new_data[, nrow(choices)] = as.matrix(data)[, nrow(choices)] + h
}
}
choice_utility <- new_data %*% coefficients
result_data[paste("utility", choices[i,1], sep = "_")] = choice_utility
}
return(result_data)
}
find_index <- function(name, add_before, sep, data){
pattern <- paste(add_before, name, sep = sep)
return(grep(pattern, colnames(data)))
}
choices_prob <- function(result_data, choices){
index <- sapply(choices %>% pull(1), find_index, add_before = "utility", sep = "_", data = result_data)
result_data <- result_data %>% mutate(sum_exp_utility = rowSums(across(.cols = all_of(index), .fns = exp)))
result_data <- result_data %>% mutate(across(all_of(index), function(x) exp(x)/sum_exp_utility))
chosen_prob <- with(result_data, exp(chosen_utility) / sum_exp_utility)
chosen_prob[chosen_prob > 0.99999] = 0.99999
chosen_prob[chosen_prob < 0.00001] = 0.00001
result_data["chosen_prob"] = chosen_prob
for (choice in choices %>% pull(1)) {
colnames(result_data)[which(names(result_data) == choice)] = paste("choice_prob", choice, sep = "_")
assign("choice_prob",   with(result_data, get(paste("choice_prob", choice, sep = "_"))))
choice_prob[choice_prob > 0.99999] = 0.99999
choice_prob[choice_prob < 0.00001] = 0.00001
result_data[paste("choice_prob", choice, sep = "_")] =  choice_prob
}
return(result_data %>% select(starts_with("choice_prob"), "chosen_prob"))
}
likelihood_logit_all <- function(coefficients, data, choices, type, h = 0, change_by_choice = 0, change_var = ""){
result_data <- choices_utility(coefficients, data, choices, type, h, change_by_choice = change_by_choice, change_var)
prob_data <- choices_prob(result_data, choices)
return(prob_data)
}
likelihood_logit <- function(coefficients, data, choices, type, h = 0, change_by_choice = 0){
result_data <- likelihood_logit_all(data = data, coefficients = coefficients, choices = choices, type = type, h = h, change_by_choice = change_by_choice)
prob_y <- result_data %>% pull(chosen_prob)
return(prob_y)
}
log_likelihood_logit <- function(coefficients, data, choices, type, change_by_choice = 0){
prob_y <- likelihood_logit(coefficients = coefficients, data = data, choices = choices, type = type, change_by_choice = change_by_choice)
log_likelihood <- sum(log(prob_y))
return(log_likelihood)
}
max_log_likelihood <- function(data, choices, times, beta_start_min, beta_start_max, best_guess = "", type, change_by_choice = 0){
if(times == 1){
best_start_point <- runif(n = ncol(data), min = beta_start_min, max = beta_start_max)
}
else{
empty_list <- vector(mode = "list", length = times)
if(class(best_guess) == "character"){
start_points <- lapply(empty_list, function(x) runif(n = ncol(data), min = beta_start_min, max = beta_start_max))
results <- lapply(X = start_points, FUN = optim,
fn = log_likelihood_logit,
method = "BFGS",
control = list(maxit = 1000, fnscale = -1),
data = data, choices = choices, type = type, change_by_choice = change_by_choice)
logLik_results <- lapply(results, "[[", 2)
max_logLik <- max(unlist(logLik_results))
positions <- which(unlist(logLik_results) == max_logLik)
best_start_point <- start_points[[positions[1]]]
}
else{
best_start_point <- best_guess
}
}
best_result <- optim(best_start_point,
fn = log_likelihood_logit,
method = "BFGS",
control = list(trace=6, maxit = 1000, fnscale = -1),
data = data, choices = choices, type = type, change_by_choice = change_by_choice,
hessian = TRUE)
return(best_result)
}
# marginal effect
marginal_effect_average <- function(coefficients, data, choices, type, h, change_by_choice = 0, choice_wise = 0, change_var = ""){
h_likelihood <- likelihood_logit_all(coefficients, data, choices, type, h, change_by_choice, change_var)
likelihood_h <- likelihood_logit_all(coefficients, data, choices, type, -h, change_by_choice, change_var)
marginal_effect_ind <- (h_likelihood - likelihood_h) / (2*h)
marginal_effect_average <-
marginal_effect_ind %>% summarise_all(mean) %>%
select(starts_with("choice_prob")) %>% t()
colnames(marginal_effect_average) = "average_marginal_effect"
if(choice_wise != 0){
test <- data[1] >= -1
result <- vector()
for (i in 2:nrow(choices)) {
result_each = marginal_effect_ind[data[i-1] == 1,] %>% summarise_all(mean)
result = rbind(result, result_each)
test = test * (data[i-1] == 0)
}
result_0 =  marginal_effect_ind[test == 1,] %>% summarise_all(mean)
result = rbind(result_0, result)
return(result)
}
return(marginal_effect_average)
}
own_marginal_effect_average_q5 <-
marginal_effect_average(own_result_q5$par, data = ind_recode_score_first_d.sample, choices = choices_q5, type = "multinomial", h = 1/1000)
own_marginal_effect_average_q5
# marginal effect
marginal_effect_average <- function(coefficients, data, choices, type, h, change_by_choice = 0, choice_wise = 0, change_var = ""){
h_likelihood <- likelihood_logit_all(coefficients, data, choices, type, h, change_by_choice, change_var)
likelihood_h <- likelihood_logit_all(coefficients, data, choices, type, -h, change_by_choice, change_var)
marginal_effect_ind <- (h_likelihood - likelihood_h) / (2*h)
marginal_effect_average <-
marginal_effect_ind %>% summarise_all(mean) %>%
select(starts_with("choice_prob")) %>% t()
colnames(marginal_effect_average) = "average_marginal_effect"
# if(choice_wise != 0){
#   test <- data[1] >= -1
#   result <- vector()
#   for (i in 2:nrow(choices)) {
#    result_each = marginal_effect_ind[data[i-1] == 1,] %>% summarise_all(mean)
#    result = rbind(result, result_each)
#    test = test * (data[i-1] == 0)
#   }
#   result_0 =  marginal_effect_ind[test == 1,] %>% summarise_all(mean)
#   result = rbind(result_0, result)
#   return(result)
# }
return(marginal_effect_average)
}
own_marginal_effect_average_q5 <-
marginal_effect_average(own_result_q5$par, data = ind_recode_score_first_d.sample, choices = choices_q5, type = "multinomial", h = 1/1000)
own_marginal_effect_average_q5
# choices_mean_q6 <-
#   sapply(choices_q6 %>% pull(choice_rev), choice_mean,
#          data = ind_recode_quality_first,
#          choice_var = "choice_rev", mean_var = "program_quality") %>%
#   as.data.frame()
# colnames(choices_mean_q6) = "program_quality"
#all_mean <- ind_recode_quality_first.sample %>% pull(program_quality) %>% mean()
#choices_mean_q6 <- choices_mean_q6 %>% mutate(program_quality = all_mean)
own_marginal_effect_average_q6 <-
marginal_effect_average(own_result_q6$par, data = ind_recode_quality_first_d.sample,
choices = choices_q6, type = "conditional", h = 1/1000,
change_by_choice = 1, choice_wise = 1, change_var = "1_arts")
warnings()
### 7
# Using model 2 would be more appropriate to see the effect of excluding "others".
# Model 2 studies the effect school-program quality on students' choices.
# When excluding "others", the relative school-program quality changes.
# Hence, we can see if such change has influence on the probability of students' choices.
# On the other hand, model 1 studies the effect of each student's own score on his choice.
# In particular, the model studies whether student choosing certain choices have higher or lower scores compared with the base choice.
# Then, excluding "others" and comparing the results does not give much economic sense.
utility <- choices_utility(coefficients = own_result_q6$par, type = "conditional", choices = choices_q6, data = ind_recode_quality_first_d.sample, change_by_choice = 1)
own_marginal_effect_average_q6
marginal_effect_average(own_result_q6$par, data = ind_recode_quality_first_d.sample,
choices = choices_q6, type = "conditional", h = 1/1000,
change_by_choice = 1, choice_wise = 1, change_var = "1_arts")
choices_utility <- function(coefficients, data, choices, type, h = 0, change_by_choice = 0, change_var = ""){
if(type == "conditional"){
new_data <- as.matrix(data[, 1:nrow(choices)])
}
else if(type == "multinomial"){
new_data <- as.matrix(data[, 1:((nrow(choices)-1)*2)])
}
result_data <- data
change_data <- new_data
change_data[, (nrow(choices)):ncol(change_data)][change_data[, (nrow(choices)):ncol(change_data)] > 0] = h
change_data[, 1:(nrow(choices)-1)] = 0
new_data = new_data + change_data
chosen_utility <- new_data %*% coefficients
result_data["chosen_utility"] = chosen_utility
if(type == "conditional"){
new_data[, 1:nrow(choices)-1] = 0
if(change_by_choice != 0){
new_data[, nrow(choices)] = as.matrix(data)[,nrow(choices) + 1]
}
if(change_by_choice != 0 & change_var != ""){
new_h = h * as.numeric((choices[1,1] == change_var))
}
else{new_h = h}
new_data[, nrow(choices)] = new_data[, nrow(choices)] + new_h
}
else if(type == "multinomial"){
new_data[,] = 0
}
result_data[paste("utility", choices[1,1], sep = "_")] = new_data %*% coefficients
for(i in 2:(nrow(choices))){
new_data[,] = 0
new_data[, i-1] = 1
if(type == "multinomial"){
new_data[, nrow(choices)-2+i] = as.matrix(data)[, ncol(new_data)+1] + h
}
else if(type == "conditional"){
if(change_by_choice != 0){
if(change_var != ""){
new_h = h * as.numeric((choices[i,1] == change_var))
}
else{new_h = h}
new_data[, nrow(choices)] = as.matrix(data)[, nrow(choices) + i] + new_h
}
else{
new_data[, nrow(choices)] = as.matrix(data)[, nrow(choices)] + h
}
}
choice_utility <- new_data %*% coefficients
result_data[paste("utility", choices[i,1], sep = "_")] = choice_utility
}
return(result_data)
}
marginal_effect_average(own_result_q6$par, data = ind_recode_quality_first_d.sample,
choices = choices_q6, type = "conditional", h = 1/1000,
change_by_choice = 1, choice_wise = 1, change_var = "1_arts")
lapply(choices_q6, print)
lapply(choices_q6[,1], print)
lapply(choices_q6 %>% pull(1), print)
lapply(choices_q6 %>% pull(1), marginal_effect_average,
own_result_q6$par, data = ind_recode_quality_first_d.sample,
choices = choices_q6, type = "conditional", h = 1/1000,
change_by_choice = 1, choice_wise = 1)
# marginal effect
marginal_effect_average <- function(change_var = "", coefficients, data, choices, type, h, change_by_choice = 0, choice_wise = 0){
h_likelihood <- likelihood_logit_all(coefficients, data, choices, type, h, change_by_choice, change_var)
likelihood_h <- likelihood_logit_all(coefficients, data, choices, type, -h, change_by_choice, change_var)
marginal_effect_ind <- (h_likelihood - likelihood_h) / (2*h)
marginal_effect_average <-
marginal_effect_ind %>% summarise_all(mean) %>%
select(starts_with("choice_prob")) %>% t()
colnames(marginal_effect_average) = "average_marginal_effect"
# if(choice_wise != 0){
#   test <- data[1] >= -1
#   result <- vector()
#   for (i in 2:nrow(choices)) {
#    result_each = marginal_effect_ind[data[i-1] == 1,] %>% summarise_all(mean)
#    result = rbind(result, result_each)
#    test = test * (data[i-1] == 0)
#   }
#   result_0 =  marginal_effect_ind[test == 1,] %>% summarise_all(mean)
#   result = rbind(result_0, result)
#   return(result)
# }
return(marginal_effect_average)
}
# marginal effect
marginal_effect_average <- function(change_var = "", coefficients, data, choices, type, h, change_by_choice = 0, choice_wise = 0){
h_likelihood <- likelihood_logit_all(coefficients, data, choices, type, h, change_by_choice, change_var)
likelihood_h <- likelihood_logit_all(coefficients, data, choices, type, -h, change_by_choice, change_var)
marginal_effect_ind <- (h_likelihood - likelihood_h) / (2*h)
marginal_effect_average <-
marginal_effect_ind %>% summarise_all(mean) %>%
select(starts_with("choice_prob")) %>% t()
colnames(marginal_effect_average) = "average_marginal_effect"
return(marginal_effect_average)
}
lapply(choices_q6 %>% pull(1), marginal_effect_average,
own_result_q6$par, data = ind_recode_quality_first_d.sample,
choices = choices_q6, type = "conditional", h = 1/1000,
change_by_choice = 1, choice_wise = 1)
lapply(choices_q6 %>% pull(1), marginal_effect_average,
own_result_q6$par, data = ind_recode_quality_first_d.sample,
choices = choices_q6, type = "conditional", h = 1/1000,
change_by_choice = 1, choice_wise = 1) %>% as.data.frame()
rownames(own_marginal_effect_average) = choices_q6 %>% pull(1)
own_marginal_effect_average_q6 <- lapply(choices_q6 %>% pull(1), marginal_effect_average,
own_result_q6$par, data = ind_recode_quality_first_d.sample,
choices = choices_q6, type = "conditional", h = 1/1000,
change_by_choice = 1, choice_wise = 1) %>% as.data.frame()
rownames(own_marginal_effect_average_q6) = choices_q6 %>% pull(1)
own_marginal_effect_average_q6
rownames(own_marginal_effect_average_q6) = paste("change_in", choices_q6 %>% pull(1) ,sep = "_")
own_marginal_effect_average_q6
rownames(own_marginal_effect_average_q6) = paste("relalitive_quality_change_in", choices_q6 %>% pull(1) ,sep = "_")
own_marginal_effect_average_q6
rownames(own_marginal_effect_average_q6) = paste("relative_quality_change_in", choices_q6 %>% pull(1) ,sep = "_")
own_marginal_effect_average_q6
colnames(own_marginal_effect_average_q6) = paste("marginal_effect_on_prob", choices_q6 %>% pull(1) ,sep = "_")
own_marginal_effect_average_q6
